import numpy as np

def get_trainingData():
    # === Input features: [valve_time_ms, cumulative_open_time_ms]
    X = np.array([
        # 25ms
        [25, 625], [25, 1250], [25, 1875], [25, 2500], [25, 3125],
        [25, 3750], [25, 4375], [25, 5000], [25, 5625], [25, 6250],
        [25, 6875], [25, 7500], [25, 8125], [25, 8750], [25, 9375],
        [25, 10000], [25, 10625], [25, 11250], [25, 11875], [25, 12500],
        [25, 13125], [25, 13750], [25, 14375], [25, 15000], [25, 15625],
        
        # 50ms
        [50, 1250], [50, 2500], [50, 3750], [50, 5000], [50, 6250],
        [50, 7500], [50, 8750], [50, 10000], [50, 11250], [50, 12500],
        [50, 13750], [50, 15000], [50, 16250], [50, 17500], [50, 18750],
        [50, 20000], [50, 21250], [50, 22500],

        # 75ms
        [75, 1875], [75, 3750], [75, 5625], [75, 7500], [75, 9375],
        [75, 11250], [75, 13125], [75, 15000], [75, 16875], [75, 18750],
        [75, 20625], [75, 22500], [75, 24375], [75, 26250], [75, 28125],

        # 100ms
        [100, 2500], [100, 5000], [100, 7500], [100, 10000], [100, 12500],
        [100, 15000], [100, 17500], [100, 20000], [100, 22500], [100, 25000],
        [100, 27500], [100, 30000], [100, 32500], [100, 35000], [100, 37500], [100, 40000],

        #150ms
        [150, 3750], [150, 7500], [150, 11250], [150, 15000],
        [150, 18750], [150, 22500], [150, 26250], [150, 30000],
        [150, 33750], [150, 37500], [150, 41250],

        # 200ms
        [200, 5000], [200, 10000], [200, 15000], [200, 20000], [200, 25000],
        [200, 30000], [200, 35000], [200, 40000], [200, 45000], [200, 50000],

        #250ms
        [250, 6250], [250, 12500], [250, 18750], [250, 25000],
        [250, 31250], [250, 37500], [250, 43750], [250, 50000],
        [250, 56250],

        # 300ms
        [300, 7500], [300, 15000], [300, 22500], [300, 30000], [300, 37500], [300, 45000]
    ])

    # === Corresponding TDSâ‚€ values
    TDS = np.array([
        # 25ms
        102, 110, 103, 98, 92, 89, 81, 71, 68, 62,
        58, 54, 50, 46, 46, 42, 39, 39, 37, 34,
        35, 31, 30, 29, 28,

        # 50ms
        151, 142, 132, 114, 104, 94, 82, 74, 64, 60,
        54, 47, 47, 41, 41, 36, 32, 32,

        # 75ms
        183.83, 175.96, 154.32, 135.34, 118.69, 104.09, 91.29, 80.06,
        70.21, 61.58, 58.94, 56.4, 54.0, 51.69, 49.6,

        # 100ms
        199, 191, 158, 134, 108, 96, 76, 62, 52, 41,
        33, 29, 30, 27, 28, 27,
        
        #150ms
        265, 236, 187, 148, 109, 91, 67, 50, 39, 33, 26,

        # 200ms
        337, 264, 193, 157, 112, 84, 60, 42, 37, 38,

        #250ms
        401, 293, 203, 139, 87, 57, 39, 32, 28,

        # 300ms
        441, 276, 184, 107, 63, 34
    ])

    # === New measured data ===
    new_times_s = [
        0.625, 1.25, 1.875, 2.525, 3.275, 4.125, 5.175, 6.4, 7.775,
        9.325, 11.15, 13.85, 17.35, 21.275, 28.375
    ]
    new_times_ms = [int(round(s * 1000)) for s in new_times_s]

    new_valve_times = [
        25, 25, 25, 26, 30, 34, 42, 49, 55,
        62, 73, 108, 140, 157, 284
    ]

    new_tds = [
        107, 112, 109, 104, 103, 102, 99, 100, 97,
        92, 91, 102, 98, 82, 87
    ]

    # === Additional new datasets ===
    extra_open_times_1 = [625, 1125, 1750, 2375, 3375, 4750, 6625, 8500, 11625, 14750, 21625, 28500, 41000]
    extra_valve_times_1 = [25, 20, 25, 25, 40, 55, 75, 75, 125, 125, 275, 275, 500]
    extra_tds_1 = [113, 105, 108, 98, 110, 116, 124, 106, 131, 110, 141, 93, 79]

    extra_open_times_2 = [625, 1125, 1750, 2375, 3375, 4750, 6625, 8500, 11625, 14750, 21625, 28500, 41000, 59750]
    extra_valve_times_2 = [25, 20, 25, 25, 40, 55, 75, 75, 125, 125, 275, 275, 500, 750]
    extra_tds_2 = [103, 104, 107, 101, 112, 115, 129, 116, 138, 116, 148, 103, 96, 63]

    X_new = np.array([[vt, ct] for vt, ct in zip(new_valve_times, new_times_ms)])
    TDS_new = np.array(new_tds)

    X_extra_1 = np.array([[vt, ct] for vt, ct in zip(extra_valve_times_1, extra_open_times_1)])
    TDS_extra_1 = np.array(extra_tds_1)

    X_extra_2 = np.array([[vt, ct] for vt, ct in zip(extra_valve_times_2, extra_open_times_2)])
    TDS_extra_2 = np.array(extra_tds_2)


    # === Combine and return ===
    X_combined = np.vstack((X, X_new, X_extra_1, X_extra_2))
    TDS_combined = np.concatenate((TDS, TDS_new, TDS_extra_1, TDS_extra_2))

    return X_combined, TDS_combined

